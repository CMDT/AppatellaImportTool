---
swagger: "2.0"
info:
  description: "This API allows access to the database for research purposes. Access\
    \ is restricted. If you have a research account, you will be able to export only\
    \ those courses for which you have permission. These courses will be further anonymmised."
  version: "1.5.0"
  title: "Appatella Research API"
  contact:
    name: "DigitalLabs@MMU"
    email: "l.cooper@mmu.ac.uk"
host: "localhost:8003"
basePath: "/apis"
schemes:
- "http"
paths:
  /reserveExport/:
    post:
      tags:
      - "export"
      summary: "Prepares the server for an export and returns an exportRequestId (required\
        \ to start the export.)"
      description: "This is the first interface that will be used to kick off the\
        \ export process. Used to make preparations for a export reservation to be\
        \ made. The returned `exportRequestId` should be noted as it is required in\
        \ requesting an export."
      operationId: "postReserveExport"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/ReserveArg"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/inline_response_200"
        400:
          description: "Bad request"
        500:
          description: "Error 500"
      security:
      - appatella_researcher_auth:
        - "researcher"
      x-swagger-router-controller: "Export"
  /requestExport/:
    get:
      tags:
      - "export"
      summary: "Starts the export process."
      description: "After being given an exportRequestId, it will begin the export\
        \ process for the associated reserved export. If the response is a STATUS:\
        \ 200 OK, then the export process has started and you can check the progress\
        \ in the GET /exportprogress/ interface."
      operationId: "getRequestExport"
      produces:
      - "application/json"
      parameters:
      - name: "exportRequestId"
        in: "query"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/inline_response_200_1"
        400:
          description: ""
      security:
      - appatella_researcher_auth:
        - "researcher"
      x-swagger-router-controller: "Export"
  /exportProgress/:
    get:
      tags:
      - "export"
      summary: "Gets the progress and fileId of the given exportRequestId."
      description: "Goes off and checks the progress of the given exportRequest. If\
        \ the export is complete, a `fileId` will be returned in the response body."
      operationId: "getExportProgress"
      produces:
      - "application/json"
      parameters:
      - name: "exportRequestId"
        in: "query"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/inline_response_200_2"
        400:
          description: ""
      security:
      - appatella_researcher_auth:
        - "researcher"
      x-swagger-router-controller: "Export"
  /export/:
    get:
      tags:
      - "export"
      summary: "Returns the file of a given fileId."
      description: "Enter the `fileId` of the file you wish to download."
      operationId: "getExport"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "fileId"
        in: "query"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            type: "string"
            format: "binary"
      security:
      - appatella_researcher_auth:
        - "researcher"
      x-swagger-router-controller: "Export"
    delete:
      tags:
      - "export"
      summary: "Deletes a stored snapshot from the server."
      description: "Used to delete the previously exported snapshots on the server."
      operationId: "deleteExport"
      parameters:
      - name: "fileId"
        in: "query"
        description: "a fileId or exportRequestId **must** be supplied."
        required: false
        type: "string"
      - name: "exportRequestId"
        in: "query"
        description: "a fileId or exportRequestId **must** be supplied."
        required: false
        type: "string"
      responses:
        200:
          description: "Status 200"
      security:
      - appatella_researcher_auth:
        - "researcher"
      x-swagger-router-controller: "Export"
  /import/:
    post:
      tags:
      - "import"
      summary: "Import a previously exported research snapshot into the connected\
        \ research."
      description: "Requires a snapshot zip and the encryption secret for decryption\
        \ before pushing into an empty, available research."
      operationId: "postImport"
      consumes:
      - "multipart/form-data"
      parameters:
      - name: "snapshotZip"
        in: "formData"
        description: "A encrypted research snapshot."
        required: true
        type: "file"
      - name: "secret"
        in: "formData"
        description: "The *password* used in file decryption. \n The `secret` was\
          \ originaly supplied when requesting the export."
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200"
        400:
          description: ""
      security:
      - appatella_researcher_auth:
        - "researcher"
      x-swagger-router-controller: "Import"
  /analysisFunctions/:
    get:
      tags:
      - "functions"
      summary: "getAnalysisFunctions"
      operationId: "getAnalysisFunctions"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/AnalysisFunctionDef"
      security:
      - appatella_researcher_auth:
        - "researcher"
      x-swagger-router-controller: "Functions"
  /analysisParameterTypes:
    get:
      tags:
      - "functions"
      summary: "returns a list of supported parameter types"
      operationId: "getParameterTypes"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            type: "array"
            items:
              type: "string"
      security:
      - appatella_researcher_auth:
        - "researcher"
      x-swagger-router-controller: "Functions"
securityDefinitions:
  appatella_researcher_auth:
    type: "oauth2"
    authorizationUrl: "https://appatella.eu.auth0.com/authorize"
    flow: "implicit"
    scopes:
      researcher: "read all deplayed course data"
definitions:
  ReserveArg:
    type: "object"
    required:
    - "secret"
    properties:
      secret:
        type: "string"
        description: "the secret used to encrypt the final output file"
      anonymise:
        type: "boolean"
        description: "anonymises course ids, by replacing with new ones"
      analysis:
        $ref: "#/definitions/AnalysisArg"
    description: "contains information with which to create the exported file"
    example:
      secret: "secret"
      analysis:
        functionId: "functionId"
        parameters:
        - id: "id"
          value: "value"
        - id: "id"
          value: "value"
  AnalysisFunctionDef:
    type: "object"
    required:
    - "description"
    - "id"
    - "name"
    - "parameters"
    properties:
      id:
        type: "string"
        description: "unique identifier (this would be the actual function name)"
      name:
        type: "string"
        description: "the friendly name of the function"
      description:
        type: "string"
        description: "a friendly description of the function"
      parameters:
        type: "array"
        description: "a collection of parameters to for the function"
        items:
          $ref: "#/definitions/AnalysisParameterDef"
    example:
      name: "name"
      description: "description"
      id: "id"
      parameters:
      - isBase64EncodedJSON: "isBase64EncodedJSON"
        name: "name"
        isArray: true
        id: "id"
        type: "type"
      - isBase64EncodedJSON: "isBase64EncodedJSON"
        name: "name"
        isArray: true
        id: "id"
        type: "type"
  AnalysisParameterDef:
    type: "object"
    required:
    - "id"
    - "name"
    - "type"
    properties:
      name:
        type: "string"
        description: "the friendly name of the parameter"
      id:
        type: "string"
        description: "the unique identifier of the parameter (this would be the actual\
          \ parameter name in code)"
      type:
        type: "string"
        description: "the type of the parameter"
      isArray:
        type: "boolean"
        description: "used if the parameter is an array of the type"
      isBase64EncodedJSON:
        type: "string"
        description: "used if the parameter is a complex blob"
    example:
      isBase64EncodedJSON: "isBase64EncodedJSON"
      name: "name"
      isArray: true
      id: "id"
      type: "type"
  AnalysisArg:
    type: "object"
    properties:
      functionId:
        type: "string"
        description: "the unique identifier of the function (this may be the actual\
          \ function name)"
      parameters:
        type: "array"
        items:
          $ref: "#/definitions/AnalysisParam"
    example:
      functionId: "functionId"
      parameters:
      - id: "id"
        value: "value"
      - id: "id"
        value: "value"
  AnalysisParam:
    type: "object"
    required:
    - "id"
    - "value"
    properties:
      id:
        type: "string"
        description: "unique identifier of the parameter (may be the parameter name\
          \ in code)"
      value:
        type: "string"
        description: "the value of the parameter, to be interpreted by the function.\
          \ If a primitive, then string is run through a parser. If complex, then\
          \ the value can be submitted as base64 encoded JSON, as defined in the parameter\
          \ spec"
    example:
      id: "id"
      value: "value"
  inline_response_200:
    properties:
      exportRequestId:
        type: "string"
        description: "The export request ID."
    example:
      exportRequestId: "exportRequestId"
  inline_response_200_1:
    properties:
      exportRequestId:
        type: "string"
        description: "The export request ID."
      message:
        type: "string"
        example: ""
    example:
      exportRequestId: "exportRequestId"
      message: ""
  inline_response_200_2:
    properties:
      progress:
        type: "string"
        example: "100%"
        description: "The export progress."
      fileId:
        type: "string"
        description: "The file ID, returned only when progress is complete."
    example:
      progress: "100%"
      fileId: "fileId"
